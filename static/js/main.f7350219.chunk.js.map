{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","React","createElement","className","id","concat","mode","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","style","backgroundColor","Alert","height","alert","class","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","href","title","aria-label","Link","aria-current","to","onClick","changeMode","htmlFor","placeholder","Text","countWords","str","length","text","setText","useState","Fragment","heading","value","onChange","event","target","rows","changeval","newText","showAlert","changelower","changeclear","split","filter","defaultProps","link","App","setmode","setAlert","message","setTimeout","Router","document","body","Switch","Route","path","TextForm","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f7350219.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n  return (\r\n    <div className=\"accordion my-2\"  id=\"accordionExample\" >\r\n      <div className=\"accordion-item \" >\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n          <button\r\n            className={`accordion-button bg-${props.mode} text-${props.mode === \"dark\" ? \"white\" : \"black\"} `}\r\n            \r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseOne\"\r\n            aria-expanded=\"true\"\r\n            aria-controls=\"collapseOne\"\r\n          >\r\n            <strong > Analyze Your Text</strong>\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseOne\"\r\n          className=\"accordion-collapse collapse show\"\r\n          aria-labelledby=\"headingOne\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className={`accordion-body text-${props.mode === \"dark\" ? \"white\": \"black\"}`}\r\n          style={{\r\n              backgroundColor: props.mode ===\"dark\" ? \"#0a1e3c\" : \"white\",\r\n            }} >\r\n            Textutils gives you a way to analyze your text quickly and\r\n            efficiently. Be it word count, character count or\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n          <button\r\n          className={`accordion-button collapsed bg-${props.mode} text-${props.mode === \"dark\" ? \"white\" : \"black\"}`}\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseTwo\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseTwo\"\r\n          >\r\n            <strong> Free to Use</strong>\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseTwo\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingTwo\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className={`accordion-body text-${props.mode === \"dark\" ? \"white\": \"black\"}`}\r\n          style={{\r\n            backgroundColor: props.mode === \"dark\" ? \"#0a1e3c\" : \"white\",\r\n          }} >\r\n            Textutils is a free character counter tool that provides instant\r\n            character count & word count statistics for a given text. Textutils\r\n            reports the number of words and characters. Thus it is suitable for\r\n            writing text with word/ character limit\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n          <button\r\n            className={`accordion-button collapsed bg-${props.mode} text-${props.mode === \"dark\" ? \"white\" : \"black\"}`}\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseThree\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseThree\"\r\n          >\r\n            <strong> Browser compatible</strong>\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseThree\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingThree\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className={`accordion-body text-${props.mode === \"dark\" ? \"white\": \"black\"}`}\r\n          style={{\r\n            backgroundColor: props.mode === \"dark\" ? \"#0a1e3c\" : \"white\",\r\n          }} >\r\n            This word counter software works in any web browsers such as Chrome,\r\n            Firefox, Internet Explorer, Safari, Opera. It sults to count\r\n            characters in facebook, blog, books, excel document, pdf\r\n            document, essays, etc.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n           const lower = word.toLowerCase();\r\n           return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    <div style={{height :'55px'}} >\r\n   { props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show` }role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n  </div>}\r\n  </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nexport default function Navbar(props) {\r\n  return (\r\n    \r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/home\">Home</Link>\r\n            {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            {/* <a className=\"nav-link\" href=\"#\">About</a> */}\r\n          </li>\r\n          \r\n          \r\n        </ul>\r\n        <div className={`form-check form-switch mx-3 text-${props.mode === 'light'? 'dark': 'white'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.changeMode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >change mode</label>\r\n     </div>\r\n        <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form>\r\n        \r\n      </div>\r\n    </div>\r\n  </nav>\r\n    \r\n    \r\n  );\r\n}\r\n// sets the type of props and making it required\r\n Navbar.propTypes={\r\n    title : PropTypes.string.isRequired,\r\n   link : PropTypes.string.isRequired\r\n }\r\n // when the  vales are not passed then default values will bw used\r\n Navbar.defaultProps ={\r\n            title: 'set title',\r\n            link : 'set links'\r\n }\r\n\r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Text(props) {\r\n  let changeval = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\" converted tp uppercase\", \"success\");\r\n  };\r\n  let changelower = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\" converted tp lowercase\", \"success\");\r\n  };\r\n  let handleonchange = (event) => {\r\n    setText(event.target.value);\r\n    if (text === \" \") {\r\n      let newtext = \"\";\r\n      setText(newtext);\r\n    }\r\n  };\r\n  let changeclear = () => {\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n    props.showAlert(\" Text is Cleared\", \"success\");\r\n  };\r\n  const countWords = (str) => {\r\n    if (str.length !== 0) return str;\r\n  };\r\n  const [text, setText] = useState(\"kuchh likh le mc\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`container text-${\r\n          props.mode === \"dark\" ? \"white\" : \"black\"\r\n        }`}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className={`form-control text-${\r\n              props.mode === \"dark\" ? \"white\" : \"black\"\r\n            }`}\r\n            id=\"myBox\"\r\n            value={text}\r\n            onChange={handleonchange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#0a1e3c\" : \"white\"\r\n            }}\r\n            rows=\"5\"\r\n          ></textarea>{\" \"}\r\n          \r\n          <button onClick={changeval} type=\"button\" className=\"btn btn-primary mx-1 my-1\">\r\n            Convert to UpperCase\r\n          </button>\r\n          <button\r\n            onClick={changelower}\r\n            type=\"button \"\r\n            className=\"btn btn-primary  mx-1 my-1\"\r\n          >\r\n            Convert to LowerCase\r\n          </button>\r\n          <button\r\n            onClick={changeclear}\r\n            type=\"button \"\r\n            className=\"btn btn-primary mx-1 my-1 \"\r\n          >\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className={`container my-1 text-${\r\n          props.mode === \"dark\" ? \"white\" : \"black\"\r\n        }`}\r\n      >\r\n        <h2>Paragraph Details</h2>\r\n        <p>\r\n          {text.split(\" \").filter(countWords).length} words and {text.length}{\" \"}\r\n          characters\r\n        </p>\r\n        <p> {0.008 * text.split(\" \").filter(countWords).length} minutes to read </p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text : \"Enter some texts to see preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\n\nimport { BrowserRouter as Router, Switch, Route, } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  let showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  let changeMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#0a1e3c\";\n      showAlert(\"dark Mode is Enabled\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode is Enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"TextUtils\"\n          link=\"Links\"\n          mode={mode}\n          changeMode={changeMode}\n        />\n        <Alert alert={alert} showAlert={showAlert} />\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/about\">\n              <About mode={mode}/>\n            </Route>\n\n            <Route path=\"/\">\n              <TextForm\n                heading=\"Write some text to convert\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}