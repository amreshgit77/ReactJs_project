{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","class","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","className","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","changeMode","htmlFor","placeholder","Text","text","setText","useState","Fragment","heading","value","onChange","event","target","style","backgroundColor","rows","changeval","newText","showAlert","changelower","changeclear","str","words","trim","split","length","countWords","defaultProps","link","App","setmode","setAlert","message","setTimeout","document","body","TextForm","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9866f55d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n           const lower = word.toLowerCase();\r\n           return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show` }role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n  </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n//import { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nexport default function Navbar(props) {\r\n  return (\r\n    \r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/home\">Home</Link> */}\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link\" to=\"/about\">About</Link> */}\r\n            <a className=\"nav-link\" href=\"#\">About</a>\r\n          </li>\r\n          \r\n          \r\n        </ul>\r\n        <div className={`form-check form-switch mx-3 text-${props.mode === 'light'? 'dark': 'white'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.changeMode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >change mode</label>\r\n     </div>\r\n        <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form>\r\n        \r\n      </div>\r\n    </div>\r\n  </nav>\r\n    \r\n    \r\n  );\r\n}\r\n// sets the type of props and making it required\r\n Navbar.propTypes={\r\n    title : PropTypes.string.isRequired,\r\n   link : PropTypes.string.isRequired\r\n }\r\n // when the  vales are not passed then default values will bw used\r\n Navbar.defaultProps ={\r\n            title: 'set title',\r\n            link : 'set links'\r\n }\r\n\r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Text(props) {\r\n  let changeval = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\" converted tp uppercase\", \"success\");\r\n  };\r\n  let changelower = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\" converted tp lowercase\", \"success\");\r\n  };\r\n  let handleonchange = (event) => {\r\n    setText(event.target.value);\r\n    if(text === \" \"){\r\n      let newtext = \"\";\r\n      setText(newtext);\r\n    }\r\n  };\r\n  let changeclear = () => {\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n    props.showAlert(\" Text is Cleared\", \"success\");\r\n  };\r\n  const countWords = (str) => {\r\n    let words;\r\n    if (text === \"\") {\r\n\r\n      words = 0;\r\n    } else {\r\n      words = str.trim().split(/\\s+/).length;\r\n    }\r\n    return words;\r\n  };\r\n  const [text, setText] = useState(\"kuchh likh le mc\");\r\n \r\n\r\n  return (\r\n    <>\r\n      <div className={`container text-${props.mode === 'dark'? 'white': 'black'}`}  >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n           \r\n            className={`form-control text-${props.mode === 'dark'? 'white': 'black'}`}\r\n            id=\"myBox\"\r\n         value={text}\r\n            onChange={handleonchange}\r\n            style={{backgroundColor:props.mode === 'dark'? '#0a1e3c': 'white'}}\r\n            rows=\"5\"\r\n            \r\n          ></textarea>                                                                                                          ,\r\n          <button onClick={changeval} type=\"button\" className=\"btn btn-primary\">\r\n            Convert to UpperCase\r\n          </button>\r\n          <button\r\n            onClick={changelower} \r\n            type=\"button \"\r\n            className=\"btn btn-primary mx-4\"\r\n          >\r\n            Convert to LowerCase\r\n          </button>\r\n          <button onClick={changeclear} type=\"button \" className=\"btn btn-primary \">\r\n            Clear\r\n          </button>\r\n          \r\n          \r\n        </div>\r\n      </div>\r\n      <div className={`container my-1 text-${props.mode === 'dark'? 'white': 'black'}`}>\r\n        <h2>Paragraph Details</h2>\r\n        <p>{countWords(text)} words and {text.length} characters</p>\r\n        <p> {0.008 * text.split(\"\").length} minutes to read </p>\r\n        <h3 >Preview</h3>\r\n        <p>{text.length>0? text: \"Enter some texts to see preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\n//import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n//import React from \"react\";\n\n//import { BrowserRouter as Router, Switch, Route, } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  let showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  let changeMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#0a1e3c\";\n      showAlert(\"dark Mode is Enabled\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode is Enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtils\"\n          link=\"Links\"\n          mode={mode}\n          changeMode={changeMode}\n        />\n        <Alert alert={alert} showAlert={showAlert} />\n        <div className=\"container\">\n          {/* <Switch>\n            <Route path=\"/about\">\n              <About mode={mode}/>\n            </Route> */}\n\n            {/* <Route path=\"/\"> */}\n              <TextForm\n                heading=\"Write some text to convert\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}