{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","React","createElement","className","id","concat","mode","style","backgroundColor","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Alert","height","alert","class","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","href","title","aria-label","Link","aria-current","to","onClick","changeMode","htmlFor","Text","countWords","str","length","text","setText","useState","Fragment","heading","value","onChange","event","target","rows","placeholder","disabled","changeval","newText","showAlert","changelower","changeclear","handlecopy","navigator","clipboard","writeText","handleExtraSpaces","split","join","filter","defaultProps","link","App","setmode","setAlert","message","setTimeout","Router","document","body","Switch","Route","path","TextForm","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.091aea68.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n  return (\r\n    <div className=\"accordion my-2\"  id=\"accordionExample\" >\r\n      <div className=\"accordion-item \" >\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n          <button\r\n            className={`accordion-button  text-${props.mode === \"dark\" ? \"white\" : \"black\"} `}\r\n            style={{\r\n              backgroundColor: props.mode ===\"dark\" ? \"rgb(34 54 86)\" : \"white\",\r\n            }}\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseOne\"\r\n            aria-expanded=\"true\"\r\n            aria-controls=\"collapseOne\"\r\n          >\r\n            <strong > Analyze Your Text</strong>\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseOne\"\r\n          className=\"accordion-collapse collapse show\"\r\n          aria-labelledby=\"headingOne\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className={`accordion-body text-${props.mode === \"dark\" ? \"white\": \"black\"}`}\r\n          style={{\r\n              backgroundColor: props.mode ===\"dark\" ? \"#0a1e3c\" : \"white\",\r\n            }} >\r\n            Textutils gives you a way to analyze your text quickly and\r\n            efficiently. Be it word count, character count or\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n          <button\r\n          className={`accordion-button collapsed  text-${props.mode === \"dark\" ? \"white\" : \"black\"}`}\r\n          style={{\r\n            backgroundColor: props.mode ===\"dark\" ? \"rgb(34 54 86)\" : \"white\",\r\n          }}\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseTwo\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseTwo\"\r\n          >\r\n            <strong> Free to Use</strong>\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseTwo\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingTwo\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className={`accordion-body text-${props.mode === \"dark\" ? \"white\": \"black\"}`}\r\n          style={{\r\n            backgroundColor: props.mode === \"dark\" ? \"#0a1e3c\" : \"white\",\r\n          }} >\r\n            Textutils is a free character counter tool that provides instant\r\n            character count & word count statistics for a given text. Textutils\r\n            reports the number of words and characters. Thus it is suitable for\r\n            writing text with word/ character limit\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n          <button\r\n            className={`accordion-button collapsed  text-${props.mode === \"dark\" ? \"white\" : \"black\"}`}\r\n            style={{\r\n              backgroundColor: props.mode ===\"dark\" ? \"rgb(34 54 86)\" : \"white\",\r\n            }}\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseThree\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseThree\"\r\n          >\r\n            <strong> Browser compatible</strong>\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseThree\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingThree\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className={`accordion-body text-${props.mode === \"dark\" ? \"white\": \"black\"}`}\r\n          style={{\r\n            backgroundColor: props.mode === \"dark\" ? \"#0a1e3c\" : \"white\",\r\n          }} >\r\n            This word counter software works in any web browsers such as Chrome,\r\n            Firefox, Internet Explorer, Safari, Opera. It sults to count\r\n            characters in facebook, blog, books, excel document, pdf\r\n            document,essays,etc.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n           const lower = word.toLowerCase();\r\n           return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    <div style={{height :'55px'}} >\r\n   { props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show` }role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n  </div>}\r\n  </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nexport default function Navbar(props) {\r\n  return (\r\n    \r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link \" aria-current=\"page\" to=\"/home\">Home</Link>\r\n            {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            {/* <a className=\"nav-link\" href=\"#\">About</a> */}\r\n          </li>\r\n          \r\n          \r\n        </ul>\r\n        <div className={`form-check form-switch mx-3 text-${props.mode === 'light'? 'dark': 'white'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.changeMode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >change mode</label>\r\n     </div>\r\n        {/* <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        \r\n      </div>\r\n    </div>\r\n  </nav>\r\n    \r\n    \r\n  );\r\n}\r\n// sets the type of props and making it required\r\n Navbar.propTypes={\r\n    title : PropTypes.string.isRequired,\r\n   link : PropTypes.string.isRequired\r\n }\r\n // when the  vales are not passed then default values will bw used\r\n Navbar.defaultProps ={\r\n            title: 'set title',\r\n            link : 'set links'\r\n }\r\n\r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Text(props) {\r\n  let changeval = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\" converted tp uppercase\", \"success\");\r\n  };\r\n  let changelower = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"converted tp lowercase\", \"success\");\r\n  };\r\n  let handleonchange = (event) => {\r\n    setText(event.target.value);\r\n    if (text === \" \") {\r\n      let newtext = \"\";\r\n      setText(newtext);\r\n    }\r\n  };\r\n  let changeclear = () => {\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n    props.showAlert(\" Text is Cleared\", \"success\");\r\n  };\r\n  const countWords = (str) => {\r\n    if (str.length !== 0) return str;\r\n  };\r\n\r\n  const handlecopy=()=> {\r\n    navigator.clipboard.writeText(text);   \r\n    props.showAlert(\" Text is Copied\", \"success\");\r\n  }\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed!\", \"success\");\r\n}\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`container text-${\r\n          props.mode === \"dark\" ? \"white\" : \"black\"\r\n        }`}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className={`form-control text-${\r\n              props.mode === \"dark\" ? \"white\" : \"black\"\r\n            }`}\r\n            id=\"myBox\"\r\n            value={text}\r\n            onChange={handleonchange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#0a1e3c\" : \"white\"\r\n            }}\r\n            rows=\"5\"\r\n            placeholder=\"write something\"\r\n          ></textarea>{\" \"}\r\n          \r\n          <button disabled={text.length===0} onClick={changeval} type=\"button\" className=\"btn btn-primary mx-1 my-1\" >\r\n            Convert to UpperCase\r\n          </button>\r\n          <button\r\n          disabled={text.length===0}\r\n            onClick={changelower}\r\n            type=\"button \"\r\n            className=\"btn btn-primary  mx-1 my-1\"\r\n          >\r\n            Convert to LowerCase\r\n          </button>\r\n          <button\r\n          disabled={text.length===0}\r\n            onClick={changeclear}\r\n            type=\"button \"\r\n            className=\"btn btn-primary mx-1 my-1 \"\r\n           \r\n          >\r\n            Clear\r\n          </button>\r\n          <button\r\n          disabled={text.length===0}\r\n            onClick={handlecopy}\r\n            type=\"button \"\r\n            className=\"btn btn-primary mx-1 my-1 \"\r\n          >\r\n           Copy\r\n          </button>\r\n          <button\r\n          disabled={text.length===0}\r\n            onClick={handleExtraSpaces}\r\n            type=\"button \"\r\n            className=\"btn btn-primary mx-1 my-1 \"\r\n          >\r\n           remove Extra Space\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className={`container my-1 text-${\r\n          props.mode === \"dark\" ? \"white\" : \"black\"\r\n        }`}\r\n      >\r\n        <h2>Paragraph Details</h2>\r\n        <p>\r\n          {text.split(/\\s+/).filter(countWords).length} words and {text.length}{\" \"}\r\n          characters\r\n        </p>\r\n        <p> {0.008 * text.split(\" \").filter(countWords).length} minutes to read </p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text : \"Enter some texts to see preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { BrowserRouter as Router, Switch, Route, } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  let showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  let changeMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#0a1e3c\";\n      showAlert(\"dark Mode is Enabled\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode is Enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"TextUtils\"\n          link=\"Links\"\n          mode={mode}\n          changeMode={changeMode}\n        />\n        <Alert alert={alert} showAlert={showAlert} />\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/about\">\n              <About mode={mode}/>\n            </Route>\n\n            <Route path=\"/\">\n              <TextForm\n                heading=\"Convert text into UpperCase and LowerCase\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}